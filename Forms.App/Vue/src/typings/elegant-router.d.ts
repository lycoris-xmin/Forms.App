/* eslint-disable */
/* prettier-ignore */
// Generated by elegant-router
// Read more: https://github.com/soybeanjs/elegant-router

declare module "@elegant-router/types" {
  type ElegantConstRoute = import('@elegant-router/vue').ElegantConstRoute;

  /**
   * route layout
   */
  export type RouteLayout = "base" | "blank";

  /**
   * route map
   */
  export type RouteMap = {
    "root": "/";
    "not-found": "/:pathMatch(.*)*";
    "exception": "/exception";
    "exception_403": "/exception/403";
    "exception_404": "/exception/404";
    "exception_500": "/exception/500";
    "document": "/document";
    "document_project": "/document/project";
    "document_project-link": "/document/project-link";
    "document_vue": "/document/vue";
    "document_vite": "/document/vite";
    "document_unocss": "/document/unocss";
    "document_naive": "/document/naive";
    "document_antd": "/document/antd";
    "403": "/403";
    "404": "/404";
    "500": "/500";
    "about": "/about";
    "about_doc": "/about/doc";
    "about_update": "/about/update";
    "alibaba": "/alibaba";
    "alibaba_comment": "/alibaba/comment";
    "alibaba_product": "/alibaba/product";
    "alibaba_shop": "/alibaba/shop";
    "alibaba_task": "/alibaba/task";
    "device": "/device";
    "device_alibaba": "/device/alibaba";
    "device_detail": "/device/detail/:id";
    "device_douyin": "/device/douyin";
    "device_jingdong": "/device/jingdong";
    "device_list": "/device/list";
    "device_pdd": "/device/pdd";
    "device_rednote": "/device/rednote";
    "device_taobao": "/device/taobao";
    "douyin": "/douyin";
    "douyin_comment": "/douyin/comment";
    "douyin_product": "/douyin/product";
    "douyin_shop": "/douyin/shop";
    "douyin_task": "/douyin/task";
    "friend": "/friend";
    "friend_audit": "/friend/audit";
    "friend_list": "/friend/list";
    "friend_request": "/friend/request";
    "home": "/home";
    "iframe-page": "/iframe-page/:url";
    "jingdong": "/jingdong";
    "jingdong_comment": "/jingdong/comment";
    "jingdong_product": "/jingdong/product";
    "jingdong_shop": "/jingdong/shop";
    "jingdong_task": "/jingdong/task";
    "logger": "/logger";
    "logger_request": "/logger/request";
    "logger_system": "/logger/system";
    "login": "/login/:module(pwd-login|code-login|register|reset-pwd|bind-wechat)?";
    "maintain": "/maintain";
    "maintain_command": "/maintain/command";
    "maintain_script": "/maintain/script";
    "pdd": "/pdd";
    "pdd_comment": "/pdd/comment";
    "pdd_product": "/pdd/product";
    "pdd_shop": "/pdd/shop";
    "pdd_task": "/pdd/task";
    "platform": "/platform";
    "platform_alipaylovepay": "/platform/alipaylovepay";
    "platform_categoryrepeat": "/platform/categoryrepeat";
    "platform_setting": "/platform/setting";
    "platform_tenant": "/platform/tenant";
    "platform_tenantuser": "/platform/tenantuser";
    "rednote": "/rednote";
    "rednote_comment": "/rednote/comment";
    "rednote_product": "/rednote/product";
    "rednote_shop": "/rednote/shop";
    "rednote_task": "/rednote/task";
    "report": "/report";
    "report_alipaylovepay": "/report/alipaylovepay";
    "report_alipaylovepayentsettle": "/report/alipaylovepayentsettle";
    "report_alipaylovepaypersettle": "/report/alipaylovepaypersettle";
    "report_settlement": "/report/settlement";
    "system": "/system";
    "system_role": "/system/role";
    "system_setting": "/system/setting";
    "system_user": "/system/user";
    "taobao": "/taobao";
    "taobao_comment": "/taobao/comment";
    "taobao_product": "/taobao/product";
    "taobao_shop": "/taobao/shop";
    "taobao_task": "/taobao/task";
    "user-center": "/user-center";
  };

  /**
   * route key
   */
  export type RouteKey = keyof RouteMap;

  /**
   * route path
   */
  export type RoutePath = RouteMap[RouteKey];

  /**
   * custom route key
   */
  export type CustomRouteKey = Extract<
    RouteKey,
    | "root"
    | "not-found"
    | "exception"
    | "exception_403"
    | "exception_404"
    | "exception_500"
    | "document"
    | "document_project"
    | "document_project-link"
    | "document_vue"
    | "document_vite"
    | "document_unocss"
    | "document_naive"
    | "document_antd"
  >;

  /**
   * the generated route key
   */
  export type GeneratedRouteKey = Exclude<RouteKey, CustomRouteKey>;

  /**
   * the first level route key, which contain the layout of the route
   */
  export type FirstLevelRouteKey = Extract<
    RouteKey,
    | "403"
    | "404"
    | "500"
    | "about"
    | "alibaba"
    | "device"
    | "douyin"
    | "friend"
    | "home"
    | "iframe-page"
    | "jingdong"
    | "logger"
    | "login"
    | "maintain"
    | "pdd"
    | "platform"
    | "rednote"
    | "report"
    | "system"
    | "taobao"
    | "user-center"
  >;

  /**
   * the custom first level route key
   */
  export type CustomFirstLevelRouteKey = Extract<
    CustomRouteKey,
    | "root"
    | "not-found"
    | "exception"
    | "document"
  >;

  /**
   * the last level route key, which has the page file
   */
  export type LastLevelRouteKey = Extract<
    RouteKey,
    | "403"
    | "404"
    | "500"
    | "iframe-page"
    | "login"
    | "about_doc"
    | "about_update"
    | "alibaba_comment"
    | "alibaba_product"
    | "alibaba_shop"
    | "alibaba_task"
    | "device_alibaba"
    | "device_douyin"
    | "device_jingdong"
    | "device_list"
    | "device_pdd"
    | "device_rednote"
    | "device_taobao"
    | "device_detail"
    | "douyin_comment"
    | "douyin_product"
    | "douyin_shop"
    | "douyin_task"
    | "friend_audit"
    | "friend_list"
    | "friend_request"
    | "home"
    | "jingdong_comment"
    | "jingdong_product"
    | "jingdong_shop"
    | "jingdong_task"
    | "logger_request"
    | "logger_system"
    | "maintain_command"
    | "maintain_script"
    | "pdd_comment"
    | "pdd_product"
    | "pdd_shop"
    | "pdd_task"
    | "platform_alipaylovepay"
    | "platform_categoryrepeat"
    | "platform_setting"
    | "platform_tenant"
    | "platform_tenantuser"
    | "rednote_comment"
    | "rednote_product"
    | "rednote_shop"
    | "rednote_task"
    | "report_alipaylovepay"
    | "report_alipaylovepayentsettle"
    | "report_alipaylovepaypersettle"
    | "report_settlement"
    | "system_role"
    | "system_setting"
    | "system_user"
    | "taobao_comment"
    | "taobao_product"
    | "taobao_shop"
    | "taobao_task"
    | "user-center"
  >;

  /**
   * the custom last level route key
   */
  export type CustomLastLevelRouteKey = Extract<
    CustomRouteKey,
    | "root"
    | "not-found"
    | "exception_403"
    | "exception_404"
    | "exception_500"
    | "document_project"
    | "document_project-link"
    | "document_vue"
    | "document_vite"
    | "document_unocss"
    | "document_naive"
    | "document_antd"
  >;

  /**
   * the single level route key
   */
  export type SingleLevelRouteKey = FirstLevelRouteKey & LastLevelRouteKey;

  /**
   * the custom single level route key
   */
  export type CustomSingleLevelRouteKey = CustomFirstLevelRouteKey & CustomLastLevelRouteKey;

  /**
   * the first level route key, but not the single level
  */
  export type FirstLevelRouteNotSingleKey = Exclude<FirstLevelRouteKey, SingleLevelRouteKey>;

  /**
   * the custom first level route key, but not the single level
   */
  export type CustomFirstLevelRouteNotSingleKey = Exclude<CustomFirstLevelRouteKey, CustomSingleLevelRouteKey>;

  /**
   * the center level route key
   */
  export type CenterLevelRouteKey = Exclude<GeneratedRouteKey, FirstLevelRouteKey | LastLevelRouteKey>;

  /**
   * the custom center level route key
   */
  export type CustomCenterLevelRouteKey = Exclude<CustomRouteKey, CustomFirstLevelRouteKey | CustomLastLevelRouteKey>;

  /**
   * the center level route key
   */
  type GetChildRouteKey<K extends RouteKey, T extends RouteKey = RouteKey> = T extends `${K}_${infer R}`
    ? R extends `${string}_${string}`
      ? never
      : T
    : never;

  /**
   * the single level route
   */
  type SingleLevelRoute<K extends SingleLevelRouteKey = SingleLevelRouteKey> = K extends string
    ? Omit<ElegantConstRoute, 'children'> & {
        name: K;
        path: RouteMap[K];
        component: `layout.${RouteLayout}$view.${K}`;
      }
    : never;

  /**
   * the last level route
   */
  type LastLevelRoute<K extends GeneratedRouteKey> = K extends LastLevelRouteKey
    ? Omit<ElegantConstRoute, 'children'> & {
        name: K;
        path: RouteMap[K];
        component: `view.${K}`;
      }
    : never;
  
  /**
   * the center level route
   */
  type CenterLevelRoute<K extends GeneratedRouteKey> = K extends CenterLevelRouteKey
    ? Omit<ElegantConstRoute, 'component'> & {
        name: K;
        path: RouteMap[K];
        children: (CenterLevelRoute<GetChildRouteKey<K>> | LastLevelRoute<GetChildRouteKey<K>>)[];
      }
    : never;

  /**
   * the multi level route
   */
  type MultiLevelRoute<K extends FirstLevelRouteNotSingleKey = FirstLevelRouteNotSingleKey> = K extends string
    ? ElegantConstRoute & {
        name: K;
        path: RouteMap[K];
        component: `layout.${RouteLayout}`;
        children: (CenterLevelRoute<GetChildRouteKey<K>> | LastLevelRoute<GetChildRouteKey<K>>)[];
      }
    : never;
  
  /**
   * the custom first level route
   */
  type CustomSingleLevelRoute<K extends CustomFirstLevelRouteKey = CustomFirstLevelRouteKey> = K extends string
    ? Omit<ElegantConstRoute, 'children'> & {
        name: K;
        path: RouteMap[K];
        component?: `layout.${RouteLayout}$view.${LastLevelRouteKey}`;
      }
    : never;

  /**
   * the custom last level route
   */
  type CustomLastLevelRoute<K extends CustomRouteKey> = K extends CustomLastLevelRouteKey
    ? Omit<ElegantConstRoute, 'children'> & {
        name: K;
        path: RouteMap[K];
        component?: `view.${LastLevelRouteKey}`;
      }
    : never;

  /**
   * the custom center level route
   */
  type CustomCenterLevelRoute<K extends CustomRouteKey> = K extends CustomCenterLevelRouteKey
    ? Omit<ElegantConstRoute, 'component'> & {
        name: K;
        path: RouteMap[K];
        children: (CustomCenterLevelRoute<GetChildRouteKey<K>> | CustomLastLevelRoute<GetChildRouteKey<K>>)[];
      }
    : never;

  /**
   * the custom multi level route
   */
  type CustomMultiLevelRoute<K extends CustomFirstLevelRouteNotSingleKey = CustomFirstLevelRouteNotSingleKey> =
    K extends string
      ? ElegantConstRoute & {
          name: K;
          path: RouteMap[K];
          component: `layout.${RouteLayout}`;
          children: (CustomCenterLevelRoute<GetChildRouteKey<K>> | CustomLastLevelRoute<GetChildRouteKey<K>>)[];
        }
      : never;

  /**
   * the custom route
   */
  type CustomRoute = CustomSingleLevelRoute | CustomMultiLevelRoute;

  /**
   * the generated route
   */
  type GeneratedRoute = SingleLevelRoute | MultiLevelRoute;

  /**
   * the elegant route
   */
  type ElegantRoute = GeneratedRoute | CustomRoute;
}
